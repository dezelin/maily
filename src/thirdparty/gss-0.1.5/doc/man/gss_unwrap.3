.\" DO NOT MODIFY THIS FILE!  It was generated by gdoc.
.TH "gss_unwrap" 3 "0.1.5" "gss" "gss"
.SH NAME
gss_unwrap \- API function
.SH SYNOPSIS
.B #include <gss.h>
.sp
.BI "OM_uint32 gss_unwrap(OM_uint32 * " minor_status ", const gss_ctx_id_t " context_handle ", const gss_buffer_t " input_message_buffer ", gss_buffer_t " output_message_buffer ", int * " conf_state ", gss_qop_t * " qop_state ");"
.SH ARGUMENTS
.IP "OM_uint32 * minor_status" 12
(Integer, modify) Mechanism specific status code.
.IP "const gss_ctx_id_t context_handle" 12
(gss_ctx_id_t, read) Identifies the context on
  which the message arrived.
.IP "const gss_buffer_t input_message_buffer" 12
(buffer, opaque, read) Protected message.
.IP "gss_buffer_t output_message_buffer" 12
(buffer, opaque, modify) Buffer to receive
  unwrapped message.  Storage associated with this buffer must be
  freed by the application after use use with a call to
  \fBgss_release_buffer()\fP.
.IP "int * conf_state" 12
(boolean, modify, optional) Non\-zero \- Confidentiality
  and integrity protection were used. Zero \- Integrity service only
  was used.  Specify NULL if not required.
.IP "gss_qop_t * qop_state" 12
(gss_qop_t, modify, optional) Quality of protection
  provided.  Specify NULL if not required.
.SH "DESCRIPTION"
Converts a message previously protected by gss_wrap back to a
usable form, verifying the embedded MIC.  The conf_state parameter
indicates whether the message was encrypted; the qop_state
parameter indicates the strength of protection that was used to
provide the confidentiality and integrity services.

Since some application\-level protocols may wish to use tokens
emitted by \fBgss_wrap()\fP to provide "secure framing", implementations
must support the wrapping and unwrapping of zero\-length messages.
.SH "RETURN VALUE"

`GSS_S_COMPLETE`: Successful completion.

`GSS_S_DEFECTIVE_TOKEN`: The token failed consistency checks.

`GSS_S_BAD_SIG`: The MIC was incorrect.

`GSS_S_DUPLICATE_TOKEN`: The token was valid, and contained a
 correct MIC for the message, but it had already been processed.

`GSS_S_OLD_TOKEN`: The token was valid, and contained a correct MIC
for the message, but it is too old to check for duplication.

`GSS_S_UNSEQ_TOKEN`: The token was valid, and contained a correct
MIC for the message, but has been verified out of sequence; a later
token has already been received.

`GSS_S_GAP_TOKEN`: The token was valid, and contained a correct MIC
for the message, but has been verified out of sequence; an earlier
expected token has not yet been received.

`GSS_S_CONTEXT_EXPIRED`: The context has already expired.

`GSS_S_NO_CONTEXT`: The context_handle parameter did not identify a
valid context.
.SH "REPORTING BUGS"
Report bugs to <bug-gss@gnu.org>.
GNU Generic Security Service home page: http://www.gnu.org/software/gss/
General help using GNU software: http://www.gnu.org/gethelp/
.SH COPYRIGHT
Copyright \(co 2003-2010 Simon Josefsson.
.br
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
.SH "SEE ALSO"
The full documentation for
.B gss
is maintained as a Texinfo manual.  If the
.B info
and
.B gss
programs are properly installed at your site, the command
.IP
.B info gss
.PP
should give you access to the complete manual.
