@subheading gss_oid_equal
@anchor{gss_oid_equal}
@deftypefun {int} {gss_oid_equal} (gss_OID @var{first_oid}, gss_OID @var{second_oid})
@var{first_oid}: 
(Object ID, read) First Object identifier.

@var{second_oid}: 
(Object ID, read) First Object identifier.


Compare two OIDs for equality.  The comparison is "deep", i.e., the
actual byte sequences of the OIDs are compared instead of just the
pointer equality.

Return value:
Returns boolean value true when the two OIDs are
  equal, otherwise false.
@end deftypefun

@subheading gss_copy_oid
@anchor{gss_copy_oid}
@deftypefun {OM_uint32} {gss_copy_oid} (OM_uint32 * @var{minor_status}, const gss_OID @var{src_oid}, gss_OID @var{dest_oid})
@var{minor_status}: 
(integer, modify) Mechanism specific status code.

@var{src_oid}: 
(Object ID, read) The object identifier to copy.

@var{dest_oid}: 
(Object ID, modify) The resultant copy of @@src_oid.
Storage associated with this name must be freed by the
application, but gss_release_oid() cannot be used generally as it
deallocate the oid structure itself too (use
gss_duplicate_oid() if you don't want this problem.)


Make an exact copy of the given OID, that shares no memory areas
with the original.

Return value:


@code{GSS_S_COMPLETE}: Successful completion.
@end deftypefun

@subheading gss_duplicate_oid
@anchor{gss_duplicate_oid}
@deftypefun {OM_uint32} {gss_duplicate_oid} (OM_uint32 * @var{minor_status}, const gss_OID @var{src_oid}, gss_OID * @var{dest_oid})
@var{minor_status}: 
(integer, modify) Mechanism specific status code.

@var{src_oid}: 
(Object ID, read) The object identifier to duplicate.

@var{dest_oid}: 
(Object ID, modify) The resultant copy of @@src_oid.
Storage associated with this name must be freed by the
application, by calling gss_release_oid().


Allocate a new OID and make it an exact copy of the given OID, that
shares no memory areas with the original.

Return value:


@code{GSS_S_COMPLETE}: Successful completion.
@end deftypefun

@subheading gss_userok
@anchor{gss_userok}
@deftypefun {int} {gss_userok} (const gss_name_t @var{name}, const char * @var{username})
@var{name}: 
(gss_name_t, read) Name to be compared.

@var{username}: 
Zero terminated string with username.


Compare the username against the output from gss_export_name()
invoked on @@name, after removing the leading OID.  This answers the
question whether the particular mechanism would authenticate them
as the same principal

Return value:
Returns 0 if the names match, non-0 otherwise.
@end deftypefun

