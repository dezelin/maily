<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
  <title>ODB 1.7.0 Compiler Command Line Manual</title>

  <meta name="copyright" content="&copy; 2009-2011 Code Synthesis Tools CC"/>
  <meta name="keywords" content="odb,object,relational,mapping,compiler,c++"/>
  <meta name="description" content="ODB Compiler Command Line Manual"/>

  <link rel="stylesheet" type="text/css" href="default.css" />

<style type="text/css">

  #synopsis {
    list-style-type:  none;
  }

  #synopsis li {
    padding-top      : 0.0em;
    padding-bottom   : 0.0em;
  }

  #commands dt {
    padding-top      : 0.4em;
  }

  #commands dd {
    padding-bottom   : 0.4em;
    padding-left     : 2em;
  }

  .options dt {
    padding-top      : 0.4em;
  }

  .options dd {
    padding-top      : 0.1em;
    padding-bottom   : 0.4em;
    padding-left     : 1.4em;
  }

</style>
</head>

<body>
<div id="container">
  <div id="content">

  <h1>NAME</h1>

  <p>odb - object-relational mapping (ORM) compiler for C++</p>

  <h1>SYNOPSIS</h1>

  <dl id="synopsis">
    <dt><code><b>odb</b> [<i>options</i>] <i>file</i> [<i>file</i>...]</code></dt>
  </dl>

  <h1>DESCRIPTION</h1>

  <p>Given a set of C++ classes in a header file, <code><b>odb</b></code>
  generates C++ code that allows you to persist, query, and update objects
  of these classes in a relational database (RDBMS). The relational
  database that the generated code should target is specified with the
  required <code><b>--database</b></code> option (see below).</p>

  <p>For an input file in the form <code><b>name.hxx</b></code> (other
  file extensions can be used instead of <code><b>.hxx</b></code>),
  the following C++ files are generated:
  <code><b>name-odb.hxx</b></code> (header file),
  <code><b>name-odb.ixx</b></code> (inline file, generated unless
  the <code><b>--suppress-inline</b></code> option is specified), and
  <code><b>name-odb.cxx</b></code> (source file).

  Additionally, if the <code><b>--generate-schema</b></code> option is
  specified and the <code><b>sql</b></code> schema format is requested,
  the <code><b>name.sql</b></code> database schema file is generated.</p>

  <h1>OPTIONS</h1>

<!-- 
     The following documentation was generated by CLI, a command
     line interface compiler for C++.
-->

<dl class="options">
  <dt><code><b>--help</b></code></dt>
  <dd>Print usage information and exit.</dd>

  <dt><code><b>--version</b></code></dt>
  <dd>Print version and exit.</dd>

  <dt><code><b>-I</b></code> <i>dir</i></dt>
  <dd>Add <i>dir</i> to the beginning of the list of directories to be searched
  for included header files.</dd>

  <dt><code><b>-D</b></code> <i>name</i>[=<i>def</i>]</dt>
  <dd>Define macro <i>name</i> with definition <i>def</i>. If definition is
  omitted, define <i>name</i> to be 1.</dd>

  <dt><code><b>-U</b></code> <i>name</i></dt>
  <dd>Cancel any previous definitions of macro <i>name</i>, either built-in or
  provided with the <code><b>-D</b></code> option.</dd>

  <dt><code><b>--database</b></code>|<code><b>-d</b></code> <i>db</i></dt>
  <dd>Generate code for the <i>db</i> database. Valid values are
  <code><b>mysql</b></code>, <code><b>oracle</b></code>,
  <code><b>pgsql</b></code>, and <code><b>sqlite</b></code>.</dd>

  <dt><code><b>--generate-query</b></code>|<code><b>-q</b></code></dt>
  <dd>Generate query support code. Without this support you cannot use views and
  can only load objects via their ids.</dd>

  <dt><code><b>--generate-schema</b></code>|<code><b>-s</b></code></dt>
  <dd>Generate the database schema. The database schema contains SQL statements
  that create database tables necessary to store persistent classes defined in
  the file being compiled. Note that by applying this schema, all the existing
  information stored in such tables will be lost.

  <p>Depending on the database being used (<code><b>--database</b></code>
  option), the schema is generated either as a standalone SQL file or embedded
  into the generated C++ code. By default the SQL file is generated for the
  MySQL, PostgreSQL, and Oracle databases and the schema is embedded into the
  C++ code for the SQLite database. Use the
  <code><b>--schema-format</b></code> option to alter the default schema
  format.</p></dd>

  <dt><code><b>--schema-format</b></code> <i>format</i></dt>
  <dd>Generate the database schema in the specified format. Pass
  <code><b>sql</b></code> as <i>format</i> to generate the database schema as
  a standalone SQL file or pass <code><b>embedded</b></code> to embed the
  schema into the generated C++ code. Repeat this option to generate the same
  database schema in multiple formats.</dd>

  <dt><code><b>--default-schema</b></code> <i>name</i></dt>
  <dd>Use <i>name</i> as the default database schema name. Schema names are
  primarily used for distinguishing between multiple embedded schemas in the
  schema catalog. If this option is not specified, the empty name, which
  corresponds to the default schema, is used.</dd>

  <dt><code><b>--default-pointer</b></code> <i>ptr</i></dt>
  <dd>Use <i>ptr</i> as the default pointer for persistent objects and views.
  Objects and views that do not have a pointer assigned with the <code><b>db
  pointer</b></code> pragma will use this pointer by default. The value of
  this option can be <code><b>*</b></code> which denotes the raw pointer and
  is the default, or qualified name of a smart pointer class template, for
  example, <code><b>std::auto_ptr</b></code>. In the latter case, the ODB
  compiler constructs the object or view pointer by adding a single template
  argument of the object or view type to the qualified name, for example
  <code><b>std::auto_ptr&lt;object></b></code>. The ODB runtime uses object
  and view pointers to return, and, in case of objects, pass and cache
  dynamically allocated instances of object and view types.

  <p>Except for the raw pointer and the standard smart pointers defined in the
  <code><b>&lt;memory></b></code> header file, you are expected to include the
  definition of the default pointer at the beginning of the generated header
  file. There are two common ways to achieve this: you can either include the
  necessary header in the file being compiled or you can use the
  <code><b>--hxx-prologue</b></code> option to add the necessary
  <code><b>#include</b></code> directive to the generated code.</p></dd>

  <dt><code><b>--profile</b></code>|<code><b>-p</b></code> <i>name</i></dt>
  <dd>Specify a profile that should be used during compilation. A profile is an
  options file. The ODB compiler first looks for a database-specific version
  with the name constructed by appending the
  <code><b>-</b></code><code><i>database</i></code><code><b>.options</b></code>
  suffix to <i>name</i>, where <code><i>database</i></code> is the database
  name as specified with the <code><b>--database</b></code> option. If this
  file is not found, then the ODB compiler looks for a database-independant
  version with the name constructed by appending just the
  <code><b>.options</b></code> suffix.

  <p>The profile options files are searched for in the same set of directories
  as C++ headers included with the <code><b>#include &lt;...></b></code>
  directive (built-in paths plus those specified with the
  <code><b>-I</b></code> options). The options file is first searched for in
  the directory itself and then in its <code><b>odb/</b></code>
  subdirectory.</p>

  <p>For the format of the options file refer to the
  <code><b>--options-file</b></code> option below. You can repeat this option
  to specify more than one profile.</p></dd>

  <dt><code><b>--table-prefix</b></code> <i>prefix</i></dt>
  <dd>Add <i>prefix</i> to table and index names. The prefix is added to both
  names that were specified with the <code><b>db table</b></code> pragma and
  those that were automatically derived from class names. If you require a
  separator, such as an underscore, between the prefix and the name, then you
  should include it into the prefix value.</dd>

  <dt><code><b>--output-dir</b></code>|<code><b>-o</b></code> <i>dir</i></dt>
  <dd>Write the generated files to <i>dir</i> instead of the current directory.</dd>

  <dt><code><b>--odb-file-suffix</b></code> <i>suffix</i></dt>
  <dd>Use <i>suffix</i> instead of the default <code><b>-odb</b></code> to
  construct the names of the generated C++ files.</dd>

  <dt><code><b>--hxx-suffix</b></code> <i>suffix</i></dt>
  <dd>Use <i>suffix</i> instead of the default <code><b>.hxx</b></code> to
  construct the name of the generated C++ header file.</dd>

  <dt><code><b>--ixx-suffix</b></code> <i>suffix</i></dt>
  <dd>Use <i>suffix</i> instead of the default <code><b>.ixx</b></code> to
  construct the name of the generated C++ inline file.</dd>

  <dt><code><b>--cxx-suffix</b></code> <i>suffix</i></dt>
  <dd>Use <i>suffix</i> instead of the default <code><b>.cxx</b></code> to
  construct the name of the generated C++ source file.</dd>

  <dt><code><b>--sql-suffix</b></code> <i>suffix</i></dt>
  <dd>Use <i>suffix</i> instead of the default <code><b>.sql</b></code> to
  construct the name of the generated database schema file.</dd>

  <dt><code><b>--hxx-prologue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the beginning of the generated C++ header file.</dd>

  <dt><code><b>--ixx-prologue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the beginning of the generated C++ inline file.</dd>

  <dt><code><b>--cxx-prologue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the beginning of the generated C++ source file.</dd>

  <dt><code><b>--sql-prologue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the beginning of the generated database schema file.</dd>

  <dt><code><b>--hxx-epilogue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the end of the generated C++ header file.</dd>

  <dt><code><b>--ixx-epilogue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the end of the generated C++ inline file.</dd>

  <dt><code><b>--cxx-epilogue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the end of the generated C++ source file.</dd>

  <dt><code><b>--sql-epilogue</b></code> <i>text</i></dt>
  <dd>Insert <i>text</i> at the end of the generated database schema file.</dd>

  <dt><code><b>--hxx-prologue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the beginning of the generated C++
  header file.</dd>

  <dt><code><b>--ixx-prologue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the beginning of the generated C++
  inline file.</dd>

  <dt><code><b>--cxx-prologue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the beginning of the generated C++
  source file.</dd>

  <dt><code><b>--sql-prologue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the beginning of the generated database
  schema file.</dd>

  <dt><code><b>--hxx-epilogue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the end of the generated C++ header
  file.</dd>

  <dt><code><b>--ixx-epilogue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the end of the generated C++ inline
  file.</dd>

  <dt><code><b>--cxx-epilogue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the end of the generated C++ source
  file.</dd>

  <dt><code><b>--sql-epilogue-file</b></code> <i>file</i></dt>
  <dd>Insert the content of <i>file</i> at the end of the generated database
  schema file.</dd>

  <dt><code><b>--odb-prologue</b></code> <i>text</i></dt>
  <dd>Compile <i>text</i> before the input header file. This option allows you to
  add additional declarations, such as custom traits specializations, to the
  ODB compilation process.</dd>

  <dt><code><b>--odb-prologue-file</b></code> <i>file</i></dt>
  <dd>Compile <i>file</i> contents before the input header file. Prologue files
  are compiled after all the prologue text fragments
  (<code><b>--odb-prologue</b></code> option).</dd>

  <dt><code><b>--odb-epilogue</b></code> <i>text</i></dt>
  <dd>Compile <i>text</i> after the input header file. This option allows you to
  add additional declarations, such as custom traits specializations, to the
  ODB compilation process.</dd>

  <dt><code><b>--odb-epilogue-file</b></code> <i>file</i></dt>
  <dd>Compile <i>file</i> contents after the input header file. Epilogue files are
  compiled after all the epilogue text fragments
  (<code><b>--odb-epilogue</b></code> option).</dd>

  <dt><code><b>--include-with-brackets</b></code></dt>
  <dd>Use angle brackets (&lt;>) instead of quotes ("") in the generated
  <code><b>#include</b></code> directives.</dd>

  <dt><code><b>--include-prefix</b></code> <i>prefix</i></dt>
  <dd>Add <i>prefix</i> to the generated <code><b>#include</b></code> directive
  paths.</dd>

  <dt><code><b>--include-regex</b></code> <i>regex</i></dt>
  <dd>Add <i>regex</i> to the list of regular expressions used to transform
  generated <code><b>#include</b></code> directive paths. The argument to this
  option is a Perl-like regular expression in the form
  <code><b>/</b><i>pattern</i><b>/</b><i>replacement</i><b>/</b></code>. Any
  character can be used as a delimiter instead of <code><b>/</b></code> and
  the delimiter can be escaped inside <code><i>pattern</i></code> and
  <code><i>replacement</i></code> with a backslash (<code><b>\</b></code>).
  You can specify multiple regular expressions by repeating this option. All
  the regular expressions are tried in the order specified and the first
  expression that matches is used.

  <p>As an example, the following expression transforms include paths in the
  form <code><b>foo/bar-odb.h</b></code> to paths in the form
  <code><b>foo/generated/bar-odb.h</b></code>:</p>

  <p><code><b>%foo/(.+)-odb.h%foo/generated/$1-odb.h%</b></code></p>

  <p>See also the REGEX AND SHELL QUOTING section below.</p></dd>

  <dt><code><b>--include-regex-trace</b></code></dt>
  <dd>Trace the process of applying regular expressions specified with the
  <code><b>--include-regex</b></code> option. Use this option to find out why
  your regular expressions don't do what you expected them to do.</dd>

  <dt><code><b>--guard-prefix</b></code> <i>prefix</i></dt>
  <dd>Add <i>prefix</i> to the generated header inclusion guards. The prefix is
  transformed to upper case and characters that are illegal in a preprocessor
  macro name are replaced with underscores.</dd>

  <dt><code><b>--options-file</b></code> <i>file</i></dt>
  <dd>Read additional options from <i>file</i> with each option appearing on a
  separate line optionally followed by space and an option value. Empty lines
  and lines starting with <code><b>#</b></code> are ignored. Option values can
  be enclosed in double (<code><b>"</b></code>) or single
  (<code><b>'</b></code>) quotes  to preserve leading and trailing whitespaces
  as well as to specify empty values. If the value itself contains trailing or
  leading quotes, enclose it with an extra pair of quotes, for example
  <code><b>'"x"'</b></code>. Non-leading and non-trailing quotes are
  interpreted as being part of the option value.

  <p>The semantics of providing options in a file is equivalent to providing
  the same set of options in the same order on the command line at the point
  where the <code><b>--options-file</b></code> option is specified except that
  the shell escaping and quoting is not required. You can repeat this option
  to specify more than one options file.</p></dd>

  <dt><code><b>-x</b></code> <i>option</i></dt>
  <dd>Pass <i>option</i> to the underlying C++ compiler (<code><b>g++</b></code>).
  The <i>option</i> value that doesn't start with <code><b>-</b></code> is
  considered the <code><b>g++</b></code> executable name.</dd>

  <dt><code><b>-v</b></code></dt>
  <dd>Print the commands executed to run the stages of compilation.</dd>

  <dt><code><b>--trace</b></code></dt>
  <dd>Trace the compilation process.</dd>

  <dt><code><b>--mysql-engine</b></code> <i>engine</i></dt>
  <dd>Use <i>engine</i> instead of the default <code><b>InnoDB</b></code> in the
  generated database schema file. For more information on the storage engine
  options see the MySQL documentation. If you would like to use the
  database-default engine, pass <code><b>default</b></code> as the value for
  this option.</dd>

  <dt><code><b>--sqlite-lax-auto-id</b></code></dt>
  <dd>Do not force monotonically increasing automatically-assigned object ids. In
  this mode the generated database schema omits the
  <code><b>AUTOINCREMENT</b></code> keyword which results in faster object
  persistence but may lead to automatically-assigned ids not being in a
  strictly ascending order. Refer to the SQLite documentation for details.</dd>

  <dt><code><b>--oracle-client-version</b></code> <i>v</i></dt>
  <dd>Specify the minimum Oracle client library (OCI) version with which the
  generated C++ code will be linked. This information is used to enable
  version-specific optimizations in the generated C++ code. The version must
  be in the <code><i>major</i><b>.</b><i>minor</i></code> form, for example,
  <code><b>11.2</b></code>.</dd>

</dl>
  <h1>REGEX AND SHELL QUOTING</h1>

  <p>When entering a regular expression argument in the shell
     command line it is often necessary to use quoting (enclosing
     the argument in <code><b>"&nbsp;"</b></code> or
     <code><b>'&nbsp;'</b></code>) in order to prevent the shell
     from interpreting certain characters, for example, spaces as
     argument separators and <code><b>$</b></code> as variable
     expansions.</p>

  <p>Unfortunately it is hard to achieve this in a manner that is
     portable across POSIX shells, such as those found on
     GNU/Linux and UNIX, and Windows shell. For example, if you
     use <code><b>"&nbsp;"</b></code> for quoting you will get a
     wrong result with POSIX shells if your expression contains
     <code><b>$</b></code>. The standard way of dealing with this
     on POSIX systems is to use <code><b>'&nbsp;'</b></code> instead.
     Unfortunately, Windows shell does not remove <code><b>'&nbsp;'</b></code>
     from arguments when they are passed to applications. As a result you
     may have to use <code><b>'&nbsp;'</b></code> for POSIX and
     <code><b>"&nbsp;"</b></code> for Windows (<code><b>$</b></code> is
     not treated as a special character on Windows).</p>

  <p>Alternatively, you can save regular expression options into
     a file, one option per line, and use this file with the
     <code><b>--options-file</b></code> option. With this approach
     you don't need to worry about shell quoting.</p>

  <h1>DIAGNOSTICS</h1>

  <p>If the input file is not valid C++, <code><b>odb</b></code>
     will issue diagnostic messages to STDERR and exit with non-zero exit
     code.</p>

  <h1>BUGS</h1>

  <p>Send bug reports to the
     <a href="mailto:odb-users@codesynthesis.com">odb-users@codesynthesis.com</a> mailing list.</p>

  </div>
  <div id="footer">
    &copy; 2009-2011 <a href="http://www.codesynthesis.com">Code Synthesis Tools CC</a>

    <div id="terms">
      Permission is granted to copy, distribute and/or modify this
      document under the terms of the
      <a href="http://codesynthesis.com/licenses/fdl-1.3.txt">GNU Free
      Documentation License, version 1.3</a>; with no Invariant Sections,
      no Front-Cover Texts and no Back-Cover Texts.
    </div>
  </div>
</div>
</body>
</html>
