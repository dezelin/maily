.\" Process this file with
.\" groff -man -Tascii odb.1
.\"
.TH ODB 1 "December 2011" "ODB 1.7.0"
.SH NAME
odb \- object-relational mapping (ORM) compiler for C++
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH SYNOPSIS
.\"--------------------------------------------------------------------
.B odb
.B [
.I options
.B ]
.I file
.B [
.IR file...
.B ]
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH DESCRIPTION
.\"--------------------------------------------------------------------
Given a set of C++ classes in a header file,
.B odb
generates C++ code that allows you to persist, query, and update objects
of these classes in a relational database (RDBMS). The relational
database that the generated code should target is specified with the
required
.B --database
option (see below).


For an input file in the form
.B name.hxx
(other file extensions can be used instead of
.BR .hxx ),
the following C++ files are generated:
.B name-odb.hxx
(header file),
.B name-odb.ixx
(inline file, generated unless
the
.B --suppress-inline
option is specified), and
.B name-odb.cxx
(source file). Additionally, if the
.B --generate-schema
option is specified and the
.B sql
schema format is requested, the
.B name.sql
database schema file is generated.
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH OPTIONS
.\"--------------------------------------------------------------------
.\"
.\" The following documentation was generated by CLI, a command
.\" line interface compiler for C++.
.\"
.IP "\fB--help\fP"
Print usage information and exit\.

.IP "\fB--version\fP"
Print version and exit\.

.IP "\fB-I\fP \fIdir\fP"
Add \fIdir\fP to the beginning of the list of directories to be searched for
included header files\.

.IP "\fB-D\fP \fIname\fP[=\fIdef\fP]"
Define macro \fIname\fP with definition \fIdef\fP\. If definition is
omitted, define \fIname\fP to be 1\.

.IP "\fB-U\fP \fIname\fP"
Cancel any previous definitions of macro \fIname\fP, either built-in or
provided with the \fB-D\fP option\.

.IP "\fB--database\fP|\fB-d\fP \fIdb\fP"
Generate code for the \fIdb\fP database\. Valid values are \fBmysql\fP,
\fBoracle\fP, \fBpgsql\fP, and \fBsqlite\fP\.

.IP "\fB--generate-query\fP|\fB-q\fP"
Generate query support code\. Without this support you cannot use views and
can only load objects via their ids\.

.IP "\fB--generate-schema\fP|\fB-s\fP"
Generate the database schema\. The database schema contains SQL statements
that create database tables necessary to store persistent classes defined in
the file being compiled\. Note that by applying this schema, all the
existing information stored in such tables will be lost\.

Depending on the database being used (\fB--database\fP option), the schema
is generated either as a standalone SQL file or embedded into the generated
C++ code\. By default the SQL file is generated for the MySQL, PostgreSQL,
and Oracle databases and the schema is embedded into the C++ code for the
SQLite database\. Use the \fB--schema-format\fP option to alter the default
schema format\.

.IP "\fB--schema-format\fP \fIformat\fP"
Generate the database schema in the specified format\. Pass \fBsql\fP as
\fIformat\fP to generate the database schema as a standalone SQL file or
pass \fBembedded\fP to embed the schema into the generated C++ code\. Repeat
this option to generate the same database schema in multiple formats\.

.IP "\fB--default-schema\fP \fIname\fP"
Use \fIname\fP as the default database schema name\. Schema names are
primarily used for distinguishing between multiple embedded schemas in the
schema catalog\. If this option is not specified, the empty name, which
corresponds to the default schema, is used\.

.IP "\fB--default-pointer\fP \fIptr\fP"
Use \fIptr\fP as the default pointer for persistent objects and views\.
Objects and views that do not have a pointer assigned with the \fBdb
pointer\fP pragma will use this pointer by default\. The value of this
option can be \fB*\fP which denotes the raw pointer and is the default, or
qualified name of a smart pointer class template, for example,
\fBstd::auto_ptr\fP\. In the latter case, the ODB compiler constructs the
object or view pointer by adding a single template argument of the object or
view type to the qualified name, for example \fBstd::auto_ptr<object>\fP\.
The ODB runtime uses object and view pointers to return, and, in case of
objects, pass and cache dynamically allocated instances of object and view
types\.

Except for the raw pointer and the standard smart pointers defined in the
\fB<memory>\fP header file, you are expected to include the definition of
the default pointer at the beginning of the generated header file\. There
are two common ways to achieve this: you can either include the necessary
header in the file being compiled or you can use the \fB--hxx-prologue\fP
option to add the necessary \fB#include\fP directive to the generated code\.

.IP "\fB--profile\fP|\fB-p\fP \fIname\fP"
Specify a profile that should be used during compilation\. A profile is an
options file\. The ODB compiler first looks for a database-specific version
with the name constructed by appending the
\fB-\fP\fIdatabase\fP\fB\.options\fP suffix to \fIname\fP, where
\fIdatabase\fP is the database name as specified with the \fB--database\fP
option\. If this file is not found, then the ODB compiler looks for a
database-independant version with the name constructed by appending just the
\fB\.options\fP suffix\.

The profile options files are searched for in the same set of directories as
C++ headers included with the \fB#include <\.\.\.>\fP directive (built-in
paths plus those specified with the \fB-I\fP options)\. The options file is
first searched for in the directory itself and then in its \fBodb/\fP
subdirectory\.

For the format of the options file refer to the \fB--options-file\fP option
below\. You can repeat this option to specify more than one profile\.

.IP "\fB--table-prefix\fP \fIprefix\fP"
Add \fIprefix\fP to table and index names\. The prefix is added to both
names that were specified with the \fBdb table\fP pragma and those that were
automatically derived from class names\. If you require a separator, such as
an underscore, between the prefix and the name, then you should include it
into the prefix value\.

.IP "\fB--output-dir\fP|\fB-o\fP \fIdir\fP"
Write the generated files to \fIdir\fP instead of the current directory\.

.IP "\fB--odb-file-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB-odb\fP to construct the names of
the generated C++ files\.

.IP "\fB--hxx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.hxx\fP to construct the name of
the generated C++ header file\.

.IP "\fB--ixx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.ixx\fP to construct the name of
the generated C++ inline file\.

.IP "\fB--cxx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.cxx\fP to construct the name of
the generated C++ source file\.

.IP "\fB--sql-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.sql\fP to construct the name of
the generated database schema file\.

.IP "\fB--hxx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ header file\.

.IP "\fB--ixx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ inline file\.

.IP "\fB--cxx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ source file\.

.IP "\fB--sql-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated database schema file\.

.IP "\fB--hxx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ header file\.

.IP "\fB--ixx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ inline file\.

.IP "\fB--cxx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ source file\.

.IP "\fB--sql-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated database schema file\.

.IP "\fB--hxx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++
header file\.

.IP "\fB--ixx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++
inline file\.

.IP "\fB--cxx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++
source file\.

.IP "\fB--sql-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated database
schema file\.

.IP "\fB--hxx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ header
file\.

.IP "\fB--ixx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ inline
file\.

.IP "\fB--cxx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ source
file\.

.IP "\fB--sql-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated database schema
file\.

.IP "\fB--odb-prologue\fP \fItext\fP"
Compile \fItext\fP before the input header file\. This option allows you to
add additional declarations, such as custom traits specializations, to the
ODB compilation process\.

.IP "\fB--odb-prologue-file\fP \fIfile\fP"
Compile \fIfile\fP contents before the input header file\. Prologue files
are compiled after all the prologue text fragments (\fB--odb-prologue\fP
option)\.

.IP "\fB--odb-epilogue\fP \fItext\fP"
Compile \fItext\fP after the input header file\. This option allows you to
add additional declarations, such as custom traits specializations, to the
ODB compilation process\.

.IP "\fB--odb-epilogue-file\fP \fIfile\fP"
Compile \fIfile\fP contents after the input header file\. Epilogue files are
compiled after all the epilogue text fragments (\fB--odb-epilogue\fP
option)\.

.IP "\fB--include-with-brackets\fP"
Use angle brackets (<>) instead of quotes ("") in the generated
\fB#include\fP directives\.

.IP "\fB--include-prefix\fP \fIprefix\fP"
Add \fIprefix\fP to the generated \fB#include\fP directive paths\.

.IP "\fB--include-regex\fP \fIregex\fP"
Add \fIregex\fP to the list of regular expressions used to transform
generated \fB#include\fP directive paths\. The argument to this option is a
Perl-like regular expression in the form
\fB/\fP\fIpattern\fP\fB/\fP\fIreplacement\fP\fB/\fP\. Any character can be
used as a delimiter instead of \fB/\fP and the delimiter can be escaped
inside \fIpattern\fP and \fIreplacement\fP with a backslash (\fB\e\fP)\. You
can specify multiple regular expressions by repeating this option\. All the
regular expressions are tried in the order specified and the first
expression that matches is used\.

As an example, the following expression transforms include paths in the form
\fBfoo/bar-odb\.h\fP to paths in the form \fBfoo/generated/bar-odb\.h\fP:

\fB%foo/(\.+)-odb\.h%foo/generated/$1-odb\.h%\fP

See also the REGEX AND SHELL QUOTING section below\.

.IP "\fB--include-regex-trace\fP"
Trace the process of applying regular expressions specified with the
\fB--include-regex\fP option\. Use this option to find out why your regular
expressions don't do what you expected them to do\.

.IP "\fB--guard-prefix\fP \fIprefix\fP"
Add \fIprefix\fP to the generated header inclusion guards\. The prefix is
transformed to upper case and characters that are illegal in a preprocessor
macro name are replaced with underscores\.

.IP "\fB--options-file\fP \fIfile\fP"
Read additional options from \fIfile\fP with each option appearing on a
separate line optionally followed by space and an option value\. Empty lines
and lines starting with \fB#\fP are ignored\. Option values can be enclosed
in double (\fB"\fP) or single (\fB'\fP) quotes  to preserve leading and
trailing whitespaces as well as to specify empty values\. If the value
itself contains trailing or leading quotes, enclose it with an extra pair of
quotes, for example \fB'"x"'\fP\. Non-leading and non-trailing quotes are
interpreted as being part of the option value\.

The semantics of providing options in a file is equivalent to providing the
same set of options in the same order on the command line at the point where
the \fB--options-file\fP option is specified except that the shell escaping
and quoting is not required\. You can repeat this option to specify more
than one options file\.

.IP "\fB-x\fP \fIoption\fP"
Pass \fIoption\fP to the underlying C++ compiler (\fBg++\fP)\. The
\fIoption\fP value that doesn't start with \fB-\fP is considered the
\fBg++\fP executable name\.

.IP "\fB-v\fP"
Print the commands executed to run the stages of compilation\.

.IP "\fB--trace\fP"
Trace the compilation process\.

.IP "\fB--mysql-engine\fP \fIengine\fP"
Use \fIengine\fP instead of the default \fBInnoDB\fP in the generated
database schema file\. For more information on the storage engine options
see the MySQL documentation\. If you would like to use the database-default
engine, pass \fBdefault\fP as the value for this option\.

.IP "\fB--sqlite-lax-auto-id\fP"
Do not force monotonically increasing automatically-assigned object ids\. In
this mode the generated database schema omits the \fBAUTOINCREMENT\fP
keyword which results in faster object persistence but may lead to
automatically-assigned ids not being in a strictly ascending order\. Refer
to the SQLite documentation for details\.

.IP "\fB--oracle-client-version\fP \fIv\fP"
Specify the minimum Oracle client library (OCI) version with which the
generated C++ code will be linked\. This information is used to enable
version-specific optimizations in the generated C++ code\. The version must
be in the \fImajor\fP\fB\.\fP\fIminor\fP form, for example, \fB11\.2\fP\.

.\"
.\" REGEX AND SHELL QUOTING
.\"
.SH REGEX AND SHELL QUOTING
When entering a regular expression argument in the shell command line
it is often necessary to use quoting (enclosing the argument in " "
or ' ') in order to prevent the shell from interpreting certain
characters, for example, spaces as argument separators and $ as
variable expansions.

Unfortunately it is hard to achieve this in a manner that is portable
across POSIX shells, such as those found on GNU/Linux and UNIX, and
Windows shell. For example, if you use " " for quoting you will get
a wrong result with POSIX shells if your expression contains $. The
standard way of dealing with this on POSIX systems is to use ' '
instead. Unfortunately, Windows shell does not remove ' '  from
arguments when they are passed to applications. As a result you may
have to use ' ' for POSIX and " " for Windows ($ is not treated as
a special character on Windows).

Alternatively, you can save regular expression options into a file,
one option per line, and use this file with the
.B --options-file
option. With this approach you don't need to worry about shell quoting.
.\"
.\" DIAGNOSTICS
.\"
.SH DIAGNOSTICS
If the input file is not valid C++,
.B odb
will issue diagnostic messages to STDERR and exit with non-zero exit code.
.\"
.\" BUGS
.\"
.SH BUGS
Send bug reports to the odb-users@codesynthesis.com mailing list.
.\"
.\" COPYRIGHT
.\"
.SH COPYRIGHT
Copyright (c) 2009-2011 Code Synthesis Tools CC.

Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
version 1.2; with no Invariant Sections, no Front-Cover Texts and
no Back-Cover Texts. Copy of the license can be obtained from
http://www.codesynthesis.com/licenses/fdl-1.3.txt
